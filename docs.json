[{"name":"NoMultipleFunctionArguments","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Reports when a function has multiple arguments, and encourages using nested lambdas instead.\n\nðŸ”§ Running with `--fix` will automatically remove all the reported errors.\n\n**WARNING**: This rule is meant as a joke, and should probably not be used in production code.\nIt is an attempt to transform Elm code into the worst possible Elm code possible\n([some more ideas on that](https://realmario.notion.site/Worst-Elm-Code-Possible-393f8fc7338b46afb13efb9766d909bf?pvs=4))\n\n**NOTE**: This rule is still a bit incomplete: it doesn't handle let functions nor lambdas yet.\n\n    config =\n        [ NoMultipleFunctionArguments.rule\n        ]\n\n\n## Fail\n\n    fn a b c =\n        a + b + c\n\n\n## Success\n\n    fn a =\n        \\b ->\n            c ->\n                a + b + c\n\n\n## When (not) to enable this rule\n\nNEVER enable this rule in production. If you think there is a real use-case, let me know, I'd be curious to hear.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-bad-code/preview --rules NoMultipleFunctionArguments\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]},{"name":"NoTopLevelLambdas","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Reports when a function's body consists of a lambda expression.\n\nðŸ”§ Running with `--fix` will automatically remove all the reported errors.\n\n**WARNING**: This rule is meant as a joke to undo the changes in the [`NoMultipleFunctionArguments`](NoMultipleFunctionArguments) rule.\n\nIn practice, this rule has its uses, but also its drawbacks (though probably leans closer to the positive side).\n\n**NOTE**: This rule is still a bit incomplete: it doesn't handle let functions nor lambdas yet.\n\n    config =\n        [ NoTopLevelLambdas.rule\n        ]\n\n\n## Fail\n\n    fn a =\n        \\b ->\n            a + b\n\n\n## Success\n\n    fn a b =\n        a + b\n\n\n## When (not) to enable this rule\n\nI think that in general this rule actually makes sense, **but** this could have a performance impact.\n\nFor instance, given the following code:\n\n    a =\n        List.filter (someFunction data) list\n\nthe code would run faster if `someFunction` was defined like:\n\n    someFunction data =\n        \\item -> ...\n\nrather than the more usual\n\n    someFunction data item =\n        ...\n\nbecause Elm is faster when functions are called with the exact number of arguments (from the declaration of the function).\nAutomatic partial application in Elm has a performance cost, that we pay in favor of ergonomics and other benefits of automatic currying.\n\nThis change in performance could be negative, but it could end up being positive too as this rule could potentially make the arguments of the declarations and call sites match.\n\nTo put things into perspective, the performance change is likely unnoticeable: in practice we call functions with the \"wrong\" number of arguments all the time in Elm already!\nBut if you've carefully crafted your function to adapt to the call sites â€” because you had this performance knowledge already and the code is used very frequently â€” then this could have a negative impact.\n\nIn practice, we could try to make the rule smarter, by looking at the call sites, and see whether this change would improve or worsen the call sites (or not affect much).\nThis could be an interesting exploration, and could make the rule actually pretty useful.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-bad-code/preview --rules NoTopLevelLambdas\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]}]